{
  config: { name: 'actual-fxdk-plugin', global: true },
  project: InferredProject {
    projectName: '/dev/null/inferredProject1*',
    projectKind: 0,
    projectService: ProjectService {
      filenameToScriptInfo: [Map],
      scriptInfoInNodeModulesWatchers: Map {},
      filenameToScriptInfoVersion: Map {},
      allJsFilesForOpenFileTelemetry: Map {},
      externalProjectToConfiguredProjectMap: Map {},
      externalProjects: [],
      inferredProjects: [],
      configuredProjects: [Map],
      openFiles: [Map],
      configFileForOpenFiles: [Map],
      openFilesWithNonRootedDiskPath: Map {},
      compilerOptionsForInferredProjectsPerProjectRoot: Map {},
      watchOptionsForInferredProjectsPerProjectRoot: Map {},
      projectToSizeMap: [Map],
      configFileExistenceInfoCache: [Map],
      safelist: [Object],
      legacySafelist: [Map],
      pendingProjectUpdates: Map {},
      pendingEnsureProjectForOpenFiles: true,
      seenProjects: [Map],
      host: [Object],
      logger: [Logger],
      cancellationToken: [Object],
      useSingleInferredProject: false,
      useInferredProjectPerProjectRoot: true,
      typingsInstaller: [NodeTypingsInstaller],
      throttleWaitMilliseconds: undefined,
      eventHandler: [Function],
      suppressDiagnosticEvents: false,
      globalPlugins: [Array],
      pluginProbeLocations: [Array],
      allowLocalPluginLoads: false,
      typesMapLocation: 'C:/dev/fivem/fivem/ext/sdk/resources/sdk-root/host/personality-theia/fxdk-app/plugins/vscode-builtin-typescript-language-features/extension/deps/typescript/lib/typesMap.json',
      serverMode: 0,
      syntaxOnly: false,
      realpathToScriptInfos: [Map],
      currentDirectory: 'C:/dev/fivem/fivem/ext/sdk/resources/sdk-root/host/personality-theia/fxdk-app',
      toCanonicalFileName: [Function: toFileNameLowerCase],
      globalCacheLocationDirectoryPath: 'c:/users/alexr/appdata/local/microsoft/typescript/4.0/',
      throttledOperations: [ThrottledOperations],
      typingsCache: [TypingsCache],
      hostConfiguration: [Object],
      documentRegistry: [Object],
      packageJsonCache: [Object],
      watchFactory: [Object],
      performanceEventHandler: [Function: bound ],
      compilerOptionsForInferredProjects: [Object],
      watchOptionsForInferredProjects: undefined
    },
    documentRegistry: {
      acquireDocument: [Function: acquireDocument],
      acquireDocumentWithKey: [Function: acquireDocumentWithKey],
      updateDocument: [Function: updateDocument],
      updateDocumentWithKey: [Function: updateDocumentWithKey],
      releaseDocument: [Function: releaseDocument],
      releaseDocumentWithKey: [Function: releaseDocumentWithKey],
      getLanguageServiceRefCounts: [Function: getLanguageServiceRefCounts],
      reportStats: [Function: reportStats],
      getKeyForCompilationSettings: [Function: getKeyForCompilationSettings]
    },
    compilerOptions: {
      module: 1,
      target: 3,
      jsx: 1,
      sourceMap: true,
      allowJs: true,
      allowSyntheticDefaultImports: true,
      allowNonTsExtensions: true,
      resolveJsonModule: true,
      noEmitForJsFiles: true
    },
    compileOnSaveEnabled: false,
    watchOptions: undefined,
    rootFiles: [],
    rootFilesMap: Map {},
    plugins: [],
    cachedUnresolvedImportsPerFile: Map {},
    hasAddedorRemovedFiles: false,
    lastReportedVersion: 0,
    projectProgramVersion: 0,
    projectStateVersion: 1,
    isInitialLoadPending: [Function: returnFalse],
    dirty: true,
    typingFiles: [],
    importSuggestionsCache: {
      isEmpty: [Function: isEmpty],
      clear: [Function: clear],
      set: [Function: set],
      get: [Function: get]
    },
    globalCacheResolutionModuleName: [Function: nonRelativeModuleNameForTypingCache],
    directoryStructureHost: {
      args: [Array],
      newLine: '\r\n',
      useCaseSensitiveFileNames: false,
      write: [Function],
      writeOutputIsTTY: [Function: writeOutputIsTTY],
      readFile: [Function: readFile],
      writeFile: [Function],
      watchFile: [Function],
      watchDirectory: [Function],
      resolvePath: [Function: resolvePath],
      fileExists: [Function: fileExists],
      directoryExists: [Function: directoryExists],
      createDirectory: [Function: createDirectory],
      getExecutingFilePath: [Function: getExecutingFilePath],
      getCurrentDirectory: [Function: getCurrentDirectory],
      getDirectories: [Function: getDirectories],
      getEnvironmentVariable: [Function: getEnvironmentVariable],
      readDirectory: [Function: readDirectory],
      getModifiedTime: [Function: getModifiedTime],
      setModifiedTime: [Function: setModifiedTime],
      deleteFile: [Function: deleteFile],
      createHash: [Function: createSHA256Hash],
      createSHA256Hash: [Function: createSHA256Hash],
      getMemoryUsage: [Function: getMemoryUsage],
      getFileSize: [Function: getFileSize],
      exit: [Function: exit],
      enableCPUProfiler: [Function: enableCPUProfiler],
      disableCPUProfiler: [Function: disableCPUProfiler],
      realpath: [Function: realpath],
      debugMode: false,
      tryEnableSourceMapsForHost: [Function: tryEnableSourceMapsForHost],
      setTimeout: [Function],
      clearTimeout: [Function: clearTimeout],
      clearScreen: [Function: clearScreen],
      setBlocking: [Function: setBlocking],
      bufferFrom: [Function: bufferFrom],
      base64decode: [Function: base64decode],
      base64encode: [Function: base64encode],
      require: [Function],
      setImmediate: [Function],
      clearImmediate: [Function: clearImmediate]
    },
    currentDirectory: 'c:/dev/test/tt/yays',
    getCanonicalFileName: [Function: toFileNameLowerCase],
    cancellationToken: ThrottledCancellationToken {
      hostCancellationToken: [Object],
      throttleWaitMilliseconds: 20,
      lastCancellationCheckTime: 0
    },
    languageServiceEnabled: true,
    realpath: [Function: bound realpath],
    resolutionCache: {
      startRecordingFilesWithChangedResolutions: [Function: startRecordingFilesWithChangedResolutions],
      finishRecordingFilesWithChangedResolutions: [Function: finishRecordingFilesWithChangedResolutions],
      startCachingPerDirectoryResolution: [Function: clearPerDirectoryResolutions],
      finishCachingPerDirectoryResolution: [Function: finishCachingPerDirectoryResolution],
      resolveModuleNames: [Function: resolveModuleNames],
      getResolvedModuleWithFailedLookupLocationsFromCache: [Function: getResolvedModuleWithFailedLookupLocationsFromCache],
      resolveTypeReferenceDirectives: [Function: resolveTypeReferenceDirectives],
      removeResolutionsFromProjectReferenceRedirects: [Function: removeResolutionsFromProjectReferenceRedirects],
      removeResolutionsOfFile: [Function: removeResolutionsOfFile],
      hasChangedAutomaticTypeDirectiveNames: [Function: hasChangedAutomaticTypeDirectiveNames],
      invalidateResolutionOfFile: [Function: invalidateResolutionOfFile],
      invalidateResolutionsOfFailedLookupLocations: [Function: invalidateResolutionsOfFailedLookupLocations],
      setFilesWithInvalidatedNonRelativeUnresolvedImports: [Function: setFilesWithInvalidatedNonRelativeUnresolvedImports],
      createHasInvalidatedResolution: [Function: createHasInvalidatedResolution],
      updateTypeRootsWatch: [Function: updateTypeRootsWatch],
      closeTypeRootsWatch: [Function: closeTypeRootsWatch],
      clear: [Function: clear]
    },
    languageService: {
      dispose: [Function: dispose],
      cleanupSemanticCache: [Function: cleanupSemanticCache],
      getSyntacticDiagnostics: [Function: getSyntacticDiagnostics],
      getSemanticDiagnostics: [Function: getSemanticDiagnostics],
      getSuggestionDiagnostics: [Function: getSuggestionDiagnostics],
      getCompilerOptionsDiagnostics: [Function: getCompilerOptionsDiagnostics],
      getSyntacticClassifications: [Function: getSyntacticClassifications],
      getSemanticClassifications: [Function: getSemanticClassifications],
      getEncodedSyntacticClassifications: [Function: getEncodedSyntacticClassifications],
      getEncodedSemanticClassifications: [Function: getEncodedSemanticClassifications],
      getCompletionsAtPosition: [Function: getCompletionsAtPosition],
      getCompletionEntryDetails: [Function: getCompletionEntryDetails],
      getCompletionEntrySymbol: [Function: getCompletionEntrySymbol],
      getSignatureHelpItems: [Function: getSignatureHelpItems],
      getQuickInfoAtPosition: [Function: getQuickInfoAtPosition],
      getDefinitionAtPosition: [Function: getDefinitionAtPosition],
      getDefinitionAndBoundSpan: [Function: getDefinitionAndBoundSpan],
      getImplementationAtPosition: [Function: getImplementationAtPosition],
      getTypeDefinitionAtPosition: [Function: getTypeDefinitionAtPosition],
      getReferencesAtPosition: [Function: getReferencesAtPosition],
      findReferences: [Function: findReferences],
      getOccurrencesAtPosition: [Function: getOccurrencesAtPosition],
      getDocumentHighlights: [Function: getDocumentHighlights],
      getNameOrDottedNameSpan: [Function: getNameOrDottedNameSpan],
      getBreakpointStatementAtPosition: [Function: getBreakpointStatementAtPosition],
      getNavigateToItems: [Function: getNavigateToItems],
      getRenameInfo: [Function: getRenameInfo],
      getSmartSelectionRange: [Function: getSmartSelectionRange],
      findRenameLocations: [Function: findRenameLocations],
      getNavigationBarItems: [Function: getNavigationBarItems],
      getNavigationTree: [Function: getNavigationTree],
      getOutliningSpans: [Function: getOutliningSpans],
      getTodoComments: [Function: getTodoComments],
      getBraceMatchingAtPosition: [Function: getBraceMatchingAtPosition],
      getIndentationAtPosition: [Function: getIndentationAtPosition],
      getFormattingEditsForRange: [Function: getFormattingEditsForRange],
      getFormattingEditsForDocument: [Function: getFormattingEditsForDocument],
      getFormattingEditsAfterKeystroke: [Function: getFormattingEditsAfterKeystroke],
      getDocCommentTemplateAtPosition: [Function: getDocCommentTemplateAtPosition],
      isValidBraceCompletionAtPosition: [Function: isValidBraceCompletionAtPosition],
      getJsxClosingTagAtPosition: [Function: getJsxClosingTagAtPosition],
      getSpanOfEnclosingComment: [Function: getSpanOfEnclosingComment],
      getCodeFixesAtPosition: [Function: getCodeFixesAtPosition],
      getCombinedCodeFix: [Function: getCombinedCodeFix],
      applyCodeActionCommand: [Function: applyCodeActionCommand],
      organizeImports: [Function: organizeImports],
      getEditsForFileRename: [Function: getEditsForFileRename],
      getEmitOutput: [Function: getEmitOutput],
      getNonBoundSourceFile: [Function: getNonBoundSourceFile],
      getProgram: [Function: getProgram],
      getAutoImportProvider: [Function: getAutoImportProvider],
      getApplicableRefactors: [Function: getApplicableRefactors],
      getEditsForRefactor: [Function: getEditsForRefactor],
      toLineColumnOffset: [Function: toLineColumnOffset],
      getSourceMapper: [Function: getSourceMapper],
      clearSourceMapperCache: [Function: clearSourceMapperCache],
      prepareCallHierarchy: [Function: prepareCallHierarchy],
      provideCallHierarchyIncomingCalls: [Function: provideCallHierarchyIncomingCalls],
      provideCallHierarchyOutgoingCalls: [Function: provideCallHierarchyOutgoingCalls],
      toggleLineComment: [Function: toggleLineComment],
      toggleMultilineComment: [Function: toggleMultilineComment],
      commentSelection: [Function: commentSelection],
      uncommentSelection: [Function: uncommentSelection]
    },
    _isJsInferredProject: false,
    projectRootPath: 'c:/dev/test/tt/yays'
  },
  languageService: {
    dispose: [Function: dispose],
    cleanupSemanticCache: [Function: cleanupSemanticCache],
    getSyntacticDiagnostics: [Function: getSyntacticDiagnostics],
    getSemanticDiagnostics: [Function: getSemanticDiagnostics],
    getSuggestionDiagnostics: [Function: getSuggestionDiagnostics],
    getCompilerOptionsDiagnostics: [Function: getCompilerOptionsDiagnostics],
    getSyntacticClassifications: [Function: getSyntacticClassifications],
    getSemanticClassifications: [Function: getSemanticClassifications],
    getEncodedSyntacticClassifications: [Function: getEncodedSyntacticClassifications],
    getEncodedSemanticClassifications: [Function: getEncodedSemanticClassifications],
    getCompletionsAtPosition: [Function: getCompletionsAtPosition],
    getCompletionEntryDetails: [Function: getCompletionEntryDetails],
    getCompletionEntrySymbol: [Function: getCompletionEntrySymbol],
    getSignatureHelpItems: [Function: getSignatureHelpItems],
    getQuickInfoAtPosition: [Function: getQuickInfoAtPosition],
    getDefinitionAtPosition: [Function: getDefinitionAtPosition],
    getDefinitionAndBoundSpan: [Function: getDefinitionAndBoundSpan],
    getImplementationAtPosition: [Function: getImplementationAtPosition],
    getTypeDefinitionAtPosition: [Function: getTypeDefinitionAtPosition],
    getReferencesAtPosition: [Function: getReferencesAtPosition],
    findReferences: [Function: findReferences],
    getOccurrencesAtPosition: [Function: getOccurrencesAtPosition],
    getDocumentHighlights: [Function: getDocumentHighlights],
    getNameOrDottedNameSpan: [Function: getNameOrDottedNameSpan],
    getBreakpointStatementAtPosition: [Function: getBreakpointStatementAtPosition],
    getNavigateToItems: [Function: getNavigateToItems],
    getRenameInfo: [Function: getRenameInfo],
    getSmartSelectionRange: [Function: getSmartSelectionRange],
    findRenameLocations: [Function: findRenameLocations],
    getNavigationBarItems: [Function: getNavigationBarItems],
    getNavigationTree: [Function: getNavigationTree],
    getOutliningSpans: [Function: getOutliningSpans],
    getTodoComments: [Function: getTodoComments],
    getBraceMatchingAtPosition: [Function: getBraceMatchingAtPosition],
    getIndentationAtPosition: [Function: getIndentationAtPosition],
    getFormattingEditsForRange: [Function: getFormattingEditsForRange],
    getFormattingEditsForDocument: [Function: getFormattingEditsForDocument],
    getFormattingEditsAfterKeystroke: [Function: getFormattingEditsAfterKeystroke],
    getDocCommentTemplateAtPosition: [Function: getDocCommentTemplateAtPosition],
    isValidBraceCompletionAtPosition: [Function: isValidBraceCompletionAtPosition],
    getJsxClosingTagAtPosition: [Function: getJsxClosingTagAtPosition],
    getSpanOfEnclosingComment: [Function: getSpanOfEnclosingComment],
    getCodeFixesAtPosition: [Function: getCodeFixesAtPosition],
    getCombinedCodeFix: [Function: getCombinedCodeFix],
    applyCodeActionCommand: [Function: applyCodeActionCommand],
    organizeImports: [Function: organizeImports],
    getEditsForFileRename: [Function: getEditsForFileRename],
    getEmitOutput: [Function: getEmitOutput],
    getNonBoundSourceFile: [Function: getNonBoundSourceFile],
    getProgram: [Function: getProgram],
    getAutoImportProvider: [Function: getAutoImportProvider],
    getApplicableRefactors: [Function: getApplicableRefactors],
    getEditsForRefactor: [Function: getEditsForRefactor],
    toLineColumnOffset: [Function: toLineColumnOffset],
    getSourceMapper: [Function: getSourceMapper],
    clearSourceMapperCache: [Function: clearSourceMapperCache],
    prepareCallHierarchy: [Function: prepareCallHierarchy],
    provideCallHierarchyIncomingCalls: [Function: provideCallHierarchyIncomingCalls],
    provideCallHierarchyOutgoingCalls: [Function: provideCallHierarchyOutgoingCalls],
    toggleLineComment: [Function: toggleLineComment],
    toggleMultilineComment: [Function: toggleMultilineComment],
    commentSelection: [Function: commentSelection],
    uncommentSelection: [Function: uncommentSelection]
  },
  languageServiceHost: InferredProject {
    projectName: '/dev/null/inferredProject1*',
    projectKind: 0,
    projectService: ProjectService {
      filenameToScriptInfo: [Map],
      scriptInfoInNodeModulesWatchers: Map {},
      filenameToScriptInfoVersion: Map {},
      allJsFilesForOpenFileTelemetry: Map {},
      externalProjectToConfiguredProjectMap: Map {},
      externalProjects: [],
      inferredProjects: [],
      configuredProjects: [Map],
      openFiles: [Map],
      configFileForOpenFiles: [Map],
      openFilesWithNonRootedDiskPath: Map {},
      compilerOptionsForInferredProjectsPerProjectRoot: Map {},
      watchOptionsForInferredProjectsPerProjectRoot: Map {},
      projectToSizeMap: [Map],
      configFileExistenceInfoCache: [Map],
      safelist: [Object],
      legacySafelist: [Map],
      pendingProjectUpdates: Map {},
      pendingEnsureProjectForOpenFiles: true,
      seenProjects: [Map],
      host: [Object],
      logger: [Logger],
      cancellationToken: [Object],
      useSingleInferredProject: false,
      useInferredProjectPerProjectRoot: true,
      typingsInstaller: [NodeTypingsInstaller],
      throttleWaitMilliseconds: undefined,
      eventHandler: [Function],
      suppressDiagnosticEvents: false,
      globalPlugins: [Array],
      pluginProbeLocations: [Array],
      allowLocalPluginLoads: false,
      typesMapLocation: 'C:/dev/fivem/fivem/ext/sdk/resources/sdk-root/host/personality-theia/fxdk-app/plugins/vscode-builtin-typescript-language-features/extension/deps/typescript/lib/typesMap.json',
      serverMode: 0,
      syntaxOnly: false,
      realpathToScriptInfos: [Map],
      currentDirectory: 'C:/dev/fivem/fivem/ext/sdk/resources/sdk-root/host/personality-theia/fxdk-app',
      toCanonicalFileName: [Function: toFileNameLowerCase],
      globalCacheLocationDirectoryPath: 'c:/users/alexr/appdata/local/microsoft/typescript/4.0/',
      throttledOperations: [ThrottledOperations],
      typingsCache: [TypingsCache],
      hostConfiguration: [Object],
      documentRegistry: [Object],
      packageJsonCache: [Object],
      watchFactory: [Object],
      performanceEventHandler: [Function: bound ],
      compilerOptionsForInferredProjects: [Object],
      watchOptionsForInferredProjects: undefined
    },
    documentRegistry: {
      acquireDocument: [Function: acquireDocument],
      acquireDocumentWithKey: [Function: acquireDocumentWithKey],
      updateDocument: [Function: updateDocument],
      updateDocumentWithKey: [Function: updateDocumentWithKey],
      releaseDocument: [Function: releaseDocument],
      releaseDocumentWithKey: [Function: releaseDocumentWithKey],
      getLanguageServiceRefCounts: [Function: getLanguageServiceRefCounts],
      reportStats: [Function: reportStats],
      getKeyForCompilationSettings: [Function: getKeyForCompilationSettings]
    },
    compilerOptions: {
      module: 1,
      target: 3,
      jsx: 1,
      sourceMap: true,
      allowJs: true,
      allowSyntheticDefaultImports: true,
      allowNonTsExtensions: true,
      resolveJsonModule: true,
      noEmitForJsFiles: true
    },
    compileOnSaveEnabled: false,
    watchOptions: undefined,
    rootFiles: [],
    rootFilesMap: Map {},
    plugins: [],
    cachedUnresolvedImportsPerFile: Map {},
    hasAddedorRemovedFiles: false,
    lastReportedVersion: 0,
    projectProgramVersion: 0,
    projectStateVersion: 1,
    isInitialLoadPending: [Function: returnFalse],
    dirty: true,
    typingFiles: [],
    importSuggestionsCache: {
      isEmpty: [Function: isEmpty],
      clear: [Function: clear],
      set: [Function: set],
      get: [Function: get]
    },
    globalCacheResolutionModuleName: [Function: nonRelativeModuleNameForTypingCache],
    directoryStructureHost: {
      args: [Array],
      newLine: '\r\n',
      useCaseSensitiveFileNames: false,
      write: [Function],
      writeOutputIsTTY: [Function: writeOutputIsTTY],
      readFile: [Function: readFile],
      writeFile: [Function],
      watchFile: [Function],
      watchDirectory: [Function],
      resolvePath: [Function: resolvePath],
      fileExists: [Function: fileExists],
      directoryExists: [Function: directoryExists],
      createDirectory: [Function: createDirectory],
      getExecutingFilePath: [Function: getExecutingFilePath],
      getCurrentDirectory: [Function: getCurrentDirectory],
      getDirectories: [Function: getDirectories],
      getEnvironmentVariable: [Function: getEnvironmentVariable],
      readDirectory: [Function: readDirectory],
      getModifiedTime: [Function: getModifiedTime],
      setModifiedTime: [Function: setModifiedTime],
      deleteFile: [Function: deleteFile],
      createHash: [Function: createSHA256Hash],
      createSHA256Hash: [Function: createSHA256Hash],
      getMemoryUsage: [Function: getMemoryUsage],
      getFileSize: [Function: getFileSize],
      exit: [Function: exit],
      enableCPUProfiler: [Function: enableCPUProfiler],
      disableCPUProfiler: [Function: disableCPUProfiler],
      realpath: [Function: realpath],
      debugMode: false,
      tryEnableSourceMapsForHost: [Function: tryEnableSourceMapsForHost],
      setTimeout: [Function],
      clearTimeout: [Function: clearTimeout],
      clearScreen: [Function: clearScreen],
      setBlocking: [Function: setBlocking],
      bufferFrom: [Function: bufferFrom],
      base64decode: [Function: base64decode],
      base64encode: [Function: base64encode],
      require: [Function],
      setImmediate: [Function],
      clearImmediate: [Function: clearImmediate]
    },
    currentDirectory: 'c:/dev/test/tt/yays',
    getCanonicalFileName: [Function: toFileNameLowerCase],
    cancellationToken: ThrottledCancellationToken {
      hostCancellationToken: [Object],
      throttleWaitMilliseconds: 20,
      lastCancellationCheckTime: 0
    },
    languageServiceEnabled: true,
    realpath: [Function: bound realpath],
    resolutionCache: {
      startRecordingFilesWithChangedResolutions: [Function: startRecordingFilesWithChangedResolutions],
      finishRecordingFilesWithChangedResolutions: [Function: finishRecordingFilesWithChangedResolutions],
      startCachingPerDirectoryResolution: [Function: clearPerDirectoryResolutions],
      finishCachingPerDirectoryResolution: [Function: finishCachingPerDirectoryResolution],
      resolveModuleNames: [Function: resolveModuleNames],
      getResolvedModuleWithFailedLookupLocationsFromCache: [Function: getResolvedModuleWithFailedLookupLocationsFromCache],
      resolveTypeReferenceDirectives: [Function: resolveTypeReferenceDirectives],
      removeResolutionsFromProjectReferenceRedirects: [Function: removeResolutionsFromProjectReferenceRedirects],
      removeResolutionsOfFile: [Function: removeResolutionsOfFile],
      hasChangedAutomaticTypeDirectiveNames: [Function: hasChangedAutomaticTypeDirectiveNames],
      invalidateResolutionOfFile: [Function: invalidateResolutionOfFile],
      invalidateResolutionsOfFailedLookupLocations: [Function: invalidateResolutionsOfFailedLookupLocations],
      setFilesWithInvalidatedNonRelativeUnresolvedImports: [Function: setFilesWithInvalidatedNonRelativeUnresolvedImports],
      createHasInvalidatedResolution: [Function: createHasInvalidatedResolution],
      updateTypeRootsWatch: [Function: updateTypeRootsWatch],
      closeTypeRootsWatch: [Function: closeTypeRootsWatch],
      clear: [Function: clear]
    },
    languageService: {
      dispose: [Function: dispose],
      cleanupSemanticCache: [Function: cleanupSemanticCache],
      getSyntacticDiagnostics: [Function: getSyntacticDiagnostics],
      getSemanticDiagnostics: [Function: getSemanticDiagnostics],
      getSuggestionDiagnostics: [Function: getSuggestionDiagnostics],
      getCompilerOptionsDiagnostics: [Function: getCompilerOptionsDiagnostics],
      getSyntacticClassifications: [Function: getSyntacticClassifications],
      getSemanticClassifications: [Function: getSemanticClassifications],
      getEncodedSyntacticClassifications: [Function: getEncodedSyntacticClassifications],
      getEncodedSemanticClassifications: [Function: getEncodedSemanticClassifications],
      getCompletionsAtPosition: [Function: getCompletionsAtPosition],
      getCompletionEntryDetails: [Function: getCompletionEntryDetails],
      getCompletionEntrySymbol: [Function: getCompletionEntrySymbol],
      getSignatureHelpItems: [Function: getSignatureHelpItems],
      getQuickInfoAtPosition: [Function: getQuickInfoAtPosition],
      getDefinitionAtPosition: [Function: getDefinitionAtPosition],
      getDefinitionAndBoundSpan: [Function: getDefinitionAndBoundSpan],
      getImplementationAtPosition: [Function: getImplementationAtPosition],
      getTypeDefinitionAtPosition: [Function: getTypeDefinitionAtPosition],
      getReferencesAtPosition: [Function: getReferencesAtPosition],
      findReferences: [Function: findReferences],
      getOccurrencesAtPosition: [Function: getOccurrencesAtPosition],
      getDocumentHighlights: [Function: getDocumentHighlights],
      getNameOrDottedNameSpan: [Function: getNameOrDottedNameSpan],
      getBreakpointStatementAtPosition: [Function: getBreakpointStatementAtPosition],
      getNavigateToItems: [Function: getNavigateToItems],
      getRenameInfo: [Function: getRenameInfo],
      getSmartSelectionRange: [Function: getSmartSelectionRange],
      findRenameLocations: [Function: findRenameLocations],
      getNavigationBarItems: [Function: getNavigationBarItems],
      getNavigationTree: [Function: getNavigationTree],
      getOutliningSpans: [Function: getOutliningSpans],
      getTodoComments: [Function: getTodoComments],
      getBraceMatchingAtPosition: [Function: getBraceMatchingAtPosition],
      getIndentationAtPosition: [Function: getIndentationAtPosition],
      getFormattingEditsForRange: [Function: getFormattingEditsForRange],
      getFormattingEditsForDocument: [Function: getFormattingEditsForDocument],
      getFormattingEditsAfterKeystroke: [Function: getFormattingEditsAfterKeystroke],
      getDocCommentTemplateAtPosition: [Function: getDocCommentTemplateAtPosition],
      isValidBraceCompletionAtPosition: [Function: isValidBraceCompletionAtPosition],
      getJsxClosingTagAtPosition: [Function: getJsxClosingTagAtPosition],
      getSpanOfEnclosingComment: [Function: getSpanOfEnclosingComment],
      getCodeFixesAtPosition: [Function: getCodeFixesAtPosition],
      getCombinedCodeFix: [Function: getCombinedCodeFix],
      applyCodeActionCommand: [Function: applyCodeActionCommand],
      organizeImports: [Function: organizeImports],
      getEditsForFileRename: [Function: getEditsForFileRename],
      getEmitOutput: [Function: getEmitOutput],
      getNonBoundSourceFile: [Function: getNonBoundSourceFile],
      getProgram: [Function: getProgram],
      getAutoImportProvider: [Function: getAutoImportProvider],
      getApplicableRefactors: [Function: getApplicableRefactors],
      getEditsForRefactor: [Function: getEditsForRefactor],
      toLineColumnOffset: [Function: toLineColumnOffset],
      getSourceMapper: [Function: getSourceMapper],
      clearSourceMapperCache: [Function: clearSourceMapperCache],
      prepareCallHierarchy: [Function: prepareCallHierarchy],
      provideCallHierarchyIncomingCalls: [Function: provideCallHierarchyIncomingCalls],
      provideCallHierarchyOutgoingCalls: [Function: provideCallHierarchyOutgoingCalls],
      toggleLineComment: [Function: toggleLineComment],
      toggleMultilineComment: [Function: toggleMultilineComment],
      commentSelection: [Function: commentSelection],
      uncommentSelection: [Function: uncommentSelection]
    },
    _isJsInferredProject: false,
    projectRootPath: 'c:/dev/test/tt/yays'
  },
  serverHost: {
    args: [
      '--useInferredProjectPerProjectRoot',
      '--enableTelemetry',
      '--cancellationPipeName',
      'C:\\Users\\alexr\\AppData\\Local\\Temp\\vscode-typescript\\eecc69d1df4da9a557a4\\tscancellation-d20ee1d792fc6b9db68c.tmp*',
      '--globalPlugins',
      'actual-fxdk-plugin,typescript-vscode-sh-plugin',
      '--pluginProbeLocations',
      'C:\\dev\\fivem\\fivem\\ext\\sdk\\resources\\sdk-root\\host\\personality-theia\\fxdk-app\\plugins\\fxdk-ts-plugin\\extension,C:\\dev\\fivem\\fivem\\ext\\sdk\\resources\\sdk-root\\host\\personality-theia\\fxdk-app\\plugins\\vscode-builtin-typescript-language-features\\extension',
      '--locale',
      'en-US',
      '--noGetErrOnBackgroundUpdate',
      '--validateDefaultNpmLocation'
    ],
    newLine: '\r\n',
    useCaseSensitiveFileNames: false,
    write: [Function],
    writeOutputIsTTY: [Function: writeOutputIsTTY],
    readFile: [Function: readFile],
    writeFile: [Function],
    watchFile: [Function],
    watchDirectory: [Function],
    resolvePath: [Function: resolvePath],
    fileExists: [Function: fileExists],
    directoryExists: [Function: directoryExists],
    createDirectory: [Function: createDirectory],
    getExecutingFilePath: [Function: getExecutingFilePath],
    getCurrentDirectory: [Function: getCurrentDirectory],
    getDirectories: [Function: getDirectories],
    getEnvironmentVariable: [Function: getEnvironmentVariable],
    readDirectory: [Function: readDirectory],
    getModifiedTime: [Function: getModifiedTime],
    setModifiedTime: [Function: setModifiedTime],
    deleteFile: [Function: deleteFile],
    createHash: [Function: createSHA256Hash],
    createSHA256Hash: [Function: createSHA256Hash],
    getMemoryUsage: [Function: getMemoryUsage],
    getFileSize: [Function: getFileSize],
    exit: [Function: exit],
    enableCPUProfiler: [Function: enableCPUProfiler],
    disableCPUProfiler: [Function: disableCPUProfiler],
    realpath: [Function: realpath],
    debugMode: false,
    tryEnableSourceMapsForHost: [Function: tryEnableSourceMapsForHost],
    setTimeout: [Function: setTimeout] {
      [Symbol(nodejs.util.promisify.custom)]: [Function]
    },
    clearTimeout: [Function: clearTimeout],
    clearScreen: [Function: clearScreen],
    setBlocking: [Function: setBlocking],
    bufferFrom: [Function: bufferFrom],
    base64decode: [Function: base64decode],
    base64encode: [Function: base64encode],
    require: [Function],
    setImmediate: [Function: setImmediate] {
      [Symbol(nodejs.util.promisify.custom)]: [Function]
    },
    clearImmediate: [Function: clearImmediate]
  }
}